
- Instalar o MongoDB na VM;
	- Aplicar segurança;
- Criar a camada de Negocios;
- Escrever testes para os Rests;
- Subir remoto e testar;
- Criar um documento no Drive com a explicação de toda a implementação:
	- Segurança;
	- Documentação dos Endpoints;
	- Arquitetura utilizada;
	- Infraestrutura utilizada;
- Criar um documento no Drive com a explicação o algoritmo escolhido;
- Implementar tanto com MongoDB o algoritmo e com base de dados normal;
- Instalar o Derby ou Mysql para uso Relacional e aplicação do Algoritimo manual;
- Criar duplicação dos Endpoints para implementar com o algoritmo manual;
- Criar endpoints:
	- busca inArea passando a posição atual do cliente, retornando todos os mais proximos num raio de X metros;
	- Remover Taxista;
	- Atualizar dados principais do taxista;
	- Incluir e atualizar metadados do taxista:
		- Idade do taxisa;
		- Carro:
			- Modelo;
			- Placa;
			- renavam;
		- Carteira de Motorista;
		- Detalhes de infração de Transito;
		- Reclamações vinculadas;
	- Fazer filtro levando em conta também os metadas do taxista;
	- Função para o cliente poder não receber mais resultados de um taxista X;
- Implementar Cache;
- Criar uma tela web para fazer as pesquisas e ver os resultados;






========================
Objetivos Bonus
========================

1. Subir a aplicação "na nuvem" e enviar o link para testarmos os endpoints.
2. Descrever algoritmo ótimo de procura dos taxistas.
3. Autenticação nos endpoints, explicando a solução.
4. Criar outros endpoints que possibilitem a mesma funcionalidade mas com
outro fluxo.
5. Endpoint Cria taxista:
	a. Parâmetros:
		i. name
		ii. carPlate: placa do carro
	b. Resposta:
		i. Apenas status code HTTP
	c. Exemplos:
		i. POST /drivers
			'{"name":"Pedro","carPlate":"RPC-9999"}'
